" CONFIGURATION SETTINGS FOR NEOVIM

" source "./plug.vim"
let &rtp.=",~/vim-configuration"

call plug#begin('~/.vim/plugged')

  Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
  Plug 'wellle/targets.vim'
  " Plug 'jistr/vim-nerdtree-tabs'
  Plug 'majutsushi/tagbar'
  "Plug 'vim-airline/vim-airline'
  " Plug 'NLKNguyen/copy-cut-paste.vim'
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
  Plug 'junegunn/fzf.vim'
  Plug 'itchyny/lightline.vim'
  " Plug 'terryma/vim-multiple-cursors'
  " Plug 'danro/rename.vim'
  " Plug 'w0rp/ale'
  " Plug 'vim-gitgutter'
  " Plug 'vim-scripts/Vim-Support'
  Plug 'kien/ctrlp.vim'
  " Plug 'me-vlad/spellfiles.vim'
  " Plug 'tmhedberg/matchit'
  " Plug 'Valloric/YouCompleteMe', { 'do': './install.py --tern-completer' }
  Plug 'ryanoasis/vim-devicons'
  Plug 'maksimr/vim-jsbeautify'
  Plug 'editorconfig/editorconfig-vim'
  Plug 'morhetz/gruvbox'
  Plug 'Valloric/MatchTagAlways'
  Plug 'vim-syntastic/syntastic'
  "
  " PLUGINS AS UTILS
  Plug 'jiangmiao/auto-pairs'
  Plug 'alvan/vim-closetag'
  Plug 'tpope/vim-surround'
  Plug 'scrooloose/nerdcommenter'
  Plug 'mattn/emmet-vim'

  " PLUGINS FOR SYNTAX
  Plug 'leafgarland/typescript-vim'
  Plug 'digitaltoad/vim-pug'
  Plug 'othree/html5.vim'
  Plug 'mxw/vim-jsx'
  Plug 'pangloss/vim-javascript'
  Plug 'cakebaker/scss-syntax.vim'
  Plug 'Yggdroot/indentLine'
  let g:indentLine_enabled = 0
  Plug 'joshdick/onedark.vim'
  Plug 'ternjs/tern_for_vim'
  if has('nvim')
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  else
    " Plug 'Shougo/deoplete.nvim'
    " Plug 'roxma/nvim-yarp'
    " Plug 'roxma/vim-hug-neovim-rpc'
  endif
  " let g:deoplete#enable_at_startup = 1
  Plug 'Shougo/neosnippet.vim'
  Plug 'Shougo/neosnippet-snippets'
  Plug 'dracula/vim'
  Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install'  }

  " snippets
  Plug 'MarcWeber/vim-addon-mw-utils'
  Plug 'tomtom/tlib_vim'
  Plug 'garbas/vim-snipmate'
  Plug 'honza/vim-snippets'
call plug#end()


" TEMPORARY OPRIONS, LATER SHOULD BE TRANSMITED TO THE RIGHT PLACE
set exrc
set secure
set path+=**

" end

" OPTIONS ======================================================= 
" [https://www.shortcutfoo.com/blog/top-50-vim-configuration-options/]
" 	Indention =================
set autoindent
set smartindent
set tabstop=2
set shiftwidth=2
set expandtab
set nosmarttab

"	Search ======================
set hlsearch
set ignorecase
set incsearch
set smartcase

"	Persormance =================
set lazyredraw

"	Text rendering ==============
set display+=lastline
set encoding=UTF-8
set linebreak
set scrolloff=7
set sidescrolloff=5
set wrap
set textwidth=0

"	User interface ==============
set laststatus=2
set ruler
set wildmenu
set cursorline
set number
set norelativenumber
set title
set noerrorbells
set novisualbell
set mouse=a

"	Code folding ================
set foldmethod=manual
set nofoldenable
set foldnestmax=2

"	Miscellaneous options =======
set autoread
set backupdir=~/.vim/temp
set directory=~/.vim/temp
set undodir=~/.vim/temp
set nowritebackup
set confirm
set hidden
set history=1000
set noswapfile
" set shell=powershell
set nospell

set encoding=UTF-8
" set guifont=Consolas:h15
set cursorline
set colorcolumn=0

set noshowmatch		" cursor no jumps to parent bracket
set backspace=indent,eol,start


" MAPPING =======================================================
let mapleader = ","

inoremap jk <esc>
inoremap ;; <esc>:
noremap <leader>q :q<cr>
noremap <leader>x :x<cr>
" FUNCTIONAL KEYS
noremap <silent> <F5> :w<cr>:Conf<cr>
noremap <silent> <F6> :IndentLinesToggle<cr>
noremap <silent> <F7> :NERDTreeToggle<cr>
noremap <silent> <F8> :TagbarToggle<cr>
" navigation tabs/buffers
nnoremap <leader>s <c-w>W
nnoremap <leader>d <c-w>w

nnoremap <silent> <c-j> <c-w>W
nnoremap <silent> <c-k> <c-w>w
nnoremap <silent> <a-h> gT
nnoremap <silent> <a-l> gt

nnoremap <silent> <leader>r :e %<cr>

" most likely to delete it, instead start to use full hot key of three keys
" nmap <c-,> <c-y>,
" imap <c-,> <c-y>,jk
let g:user_emmet_mode='in'

nnoremap : ;
nnoremap ; :
vnoremap : ;
vnoremap ; :

" nnoremap j gj
" nnoremap k gk
" inoremap j gj
" inoremap k gk

nnoremap <leader>w :w<cr>
nnoremap <c-s> :w<cr>
inoremap <leader>w <esc>:w<cr>
inoremap <c-s> <esc>:w<cr>
nnoremap <leader>q :q!<cr>
nnoremap <leader>x :x<cr>
nnoremap <space> i<space><esc>l
nnoremap <enter> i<enter><esc>l
nnoremap <backspace> i<backspace><esc>l
nnoremap vv ggVG

nnoremap <leader>co oconsole.log(<esc>mza); /* debugging-console */<esc>`za
inoremap <leader>co console.log(<esc>mza); /* debugging-console */<esc>`za

nnoremap <silent> <leader>c, :call ToggleEndChar(',')<cr>
nnoremap <silent> <leader>c; :call ToggleEndChar(';')<cr>

" ABBREVIATIONS ==================================================

autocmd BufNewFile *.phtml :set filetype=html

" map <F5> :wall!<CR>:!sbcl --load foo.cl<CR><CR>

" SETTINGS

function! ToggleEndChar(char)
  let l:lastchar = getline('.')[col('$') - 2]
  if l:lastchar ==# a:char
    exe "normal! mz$x`z"
  else
    exe "normal! mzA" . a:char . "`z"
  endif
endfunction

" nnoremap <silent> <tab>it :call InsertSnippet('it')<cr>
" nnoremap <silent> <tab>de :call InsertSnippet('describe')<cr>
" nnoremap <silent> <tab>re :call InsertSnippet('require')<cr>
" nnoremap <silent> <leader>co :call InsertSnippet('console.log')<cr>
nnoremap <silent> <leader>n :call NextMarkInSnippet()<cr>
inoremap <leader>n <esc>:call NextMarkInSnippet()<cr>

function! InsertSnippet(type)
  let g:nextMarkInSnippet = 'z'
  let l:isempty = getline('.') =~ "^$"
  let l:command = l:isempty ? 'cc' : 'o'
  if a:type ==# 'it'
    exe "normal! " . l:command . "it(''mza, () => {mya});`z"
    startinsert
  endif
  if a:type ==# 'describe'
    exe "normal! " . l:command . "describe(''mza, () => {mya});`z"
    startinsert
  endif
  if a:type ==# 'require'
    exe "normal! " . l:command . " =mza require(''mya);`zh"
    startinsert
  endif
  if a:type ==# 'console.log'
    exe "normal! " . l:command . "console.log();"
    startinsert
  endif
endfunction

function! NextMarkInSnippet()
  exe "normal! `y"
  startinsert
  " if g:nextMarkInSnippet
  "   exe "normal! `" . g:nextMarkInSnippet
  "   startinsert
  "   echo 'end'
  "   g:nextMarkInSnippet = nr2char(char2nr(g:nextMarkInSnippet) - 1)
  " endif
endfunction

cnoremap jk <esc>

let g:NERDSpaceDelims = 1
let g:NERDDefaultAlign = 'left'

if has('nvim')
	colorscheme dracula
	if has('win32')
		se shell=powershell.exe
	endif
	autocmd VimEnter :Guifont Consolas:h15
	" Guifont Consolas:h14

	" autocmd vimenter * :cd ~
	" autocmd vimenter * :NERDTree
	" autocmd vimenter * :Guifont Consolas:h14

	tnoremap <a-h> <c-\><c-n>gT
	tnoremap <a-l> <c-\><c-n>gt
	tnoremap <leader>s <c-\><c-n><c-w>W
	tnoremap <leader>d <c-\><c-n><c-w>w
	tnoremap <esc> <c-\><c-n>
	tnoremap jk <c-\><c-n>
	tnoremap <leader>q <c-\><c-n>:q<cr>

	let g:terminal_color_0  = '#2e3436'
	let g:terminal_color_1  = '#cc0000'
	let g:terminal_color_2  = '#4e9a06'
	let g:terminal_color_3  = '#c4a000'
	let g:terminal_color_4  = '#3465a4'
	let g:terminal_color_5  = '#75507b'
	let g:terminal_color_6  = '#0b939b'
	let g:terminal_color_7  = '#d3d7cf'
	let g:terminal_color_8  = '#555753'
	let g:terminal_color_9  = '#ef2929'
	let g:terminal_color_10 = '#8ae234'
	let g:terminal_color_11 = '#fce94f'
	let g:terminal_color_12 = '#729fcf'
	let g:terminal_color_13 = '#ad7fa8'
	let g:terminal_color_14 = '#00f5e9'
	let g:terminal_color_15 = '#eeeeec'

	let g:NERDTreeDirArrowExpandable = "â–¸"
	let g:NERDTreeDirArrowCollapsible = "â–¾" 



	au! TermOpen * call CustomizeAfterTermOpen()
  au! BufEnter *powershell.exe call CustomizeAfterTermEnter()
  au! BufLeave *powershell.exe call CustomizeAfterTermLeave()

  function! CustomizeAfterTermOpen()
    se nonumber
    se foldcolumn=3
    se nospell
    syn region Search start=/PS/ end=/>/
    start
  endfunction
  function! CustomizeAfterTermEnter()
    start
  endfunction
  function! CustomizeAfterTermLeave()
  endfunction

  command! Vterm call OpenSideTerminal()
  function! OpenSideTerminal()
    exe ":vs"
    exe "<c-w>w"
    echo "doen"
  endfunction
endif

" source ~\vimscripts\
command! Vimrc tabe ~/vim-configuration/myvimrc
command! Package tabe ~/package.json
command! Conf source ~/vim-configuration/myvimrc
command! Beautify call JsBeautify()
command! HtmlBeautify call HtmlBeautify()
command! Font Guifont Consolas:h15
command! Exit qa!

let g:NERDTreeWinPos = "right"
let g:NERDTreeShowHidden = 1

au BufNewFile,BufRead *.vladsyntax  setf vladsyntax
au BufNewFile,BufRead *.vladjs  setf vladjs

syn keyword customKeywords console.log
syn region Search start=/console/ end=/;/

" end Plugin CamelCaseMotion

" Syntax hightlighting
"syn clear
"hi shouldOutline guibg=#ffffff guifg=#000000 gui=bold
"syn keyword shouldOutline console log TODO NOTE
autocmd BufEnter *powershell.exe highlight Normal ctermbg=black
autocmd BufLeave *powershell.exe highlight Normal ctermbg=white

syn keyword DiffText console log consolelog console\.log

" vim-closetag
let g:closetag_filenames = '*.html,*.js'
set colorcolumn=0

" shortcuts for buffers
nnoremap <leader>1 :b 1<cr>
nnoremap <leader>2 :b 2<cr>
nnoremap <leader>3 :b 3<cr>
nnoremap <leader>4 :b 4<cr>
nnoremap <leader>5 :b 5<cr>
nnoremap <leader>6 :b 6<cr>
nnoremap <leader>7 :b 7<cr>
nnoremap <leader>8 :b 8<cr>
nnoremap <leader>9 :b 9<cr>
nnoremap <silent> <leader>l :Buffers<cr>
nnoremap <leader>. :b

nnoremap <leader>cd odebugger<esc>
inoremap <leader>cd debugger<esc>

nnoremap <leader>cw :call Windowfy()<cr>
nnoremap <leader>cl :call LogTheVariable()<cr>
function! LogTheVariable()
  exe "normal! yiw"
  exe "normal! oconsole.log(\""
  exe "normal! pa:\", "
  exe "normal! pa); /* debugging-console */"
endfunction
function! Windowfy()
  exe "normal! yiwo"
  exe "normal! iwindow."
  exe "normal! pa = "
  exe "normal! pa; /* debugging-console */"
endfunction
command! ClearDebug :g/* debugging-console */d 
" some text in (some text in brackers) and also after that

if !has('nvim')
  set pythonthreedll="C:\Users\vtymoshchyk\AppData\Local\Programs\Python\Python37\python37.dll"
  set pythondll="C:\Users\vtymoshchyk\AppData\Local\Programs\Python\Python27\python27.dll"
end

nnoremap \\a vi(

let g:mkdp_preview_options = {
      \   'maid': {
      \     'theme': 'default'
      \   }
      \ }

" nnoremap <silent> <tab>rcc :call <SID>getSnippet('rcc')<cr>
" inoremap <silent> <tab>rcc :call <SID>getSnippet('rcc')<cr>

nnoremap ,cr Simport React, { Component } from 'react';<cr>
      \<cr>
      \class nameofclass extends Component {<cr>
      \render() {<cr>
      \return (<cr>
      \<h1>This component is for: nameofclass</h1><cr>
      \)<cr>
      \}<cr>
      \}
      \<cr>
      \<cr>
      \export default nameofclass;<esc>ggVG:s/nameofclass/

command! SortWords call setline('.', join(sort(split(getline('.'), ' ')), " "))

hi CursorLine ctermfg=White ctermbg=Red

autocmd FileType markdown nnoremap <silent> <C-x> :call MarkAsCrossed()<cr>
autocmd FileType markdown nnoremap <silent> <C-d> :call MarkAsDone()<cr>
autocmd FileType markdown nnoremap <silent> <F8> :MarkdownPreview<cr>
function! MarkAsCrossed()
  normal! ma^f]ll
  let c = getline('.')[col('.')-1]
  if c == "~" 
    normal! 2x$xx
  else
    normal! i~~
    normal! A~~
  endif
  normal! `a
endfunction
function! MarkAsDone()
  normal! ma^f[l
  let c = getline('.')[col('.')-1]
  if c == "x"
    normal! r 
  endif
  if c == " "
    normal! rx
  endif
  normal! `a
endfunction

nnoremap <silent> : :Files<cr>

" nnoremap <c-m> :messages<cr>

" inoremap <silent> <tab> <esc>:call ExpandSnippet()<cr>

function! ExpandSnippet()
  let cur = col('.')
  let cmd = getline('.')[cur - 3 : cur - 1]
  if cmd == 'rcc'
    call s:getSnippet(cmd)
  elseif cmd == 'req'
    call s:getSnippet(cmd)
  else
    exe "normal! a\<tab>"
  endif
  " call feedkeys('a', 'n')
endfunction

function! s:getSnippet(type)
  normal! hh3s
  if a:type == "rcc"
    exe "norm! Simport React, { Component } from 'react';\<cr>
          \\<cr>
          \class nameofclass extends Component {\<cr>
          \render() {\<cr>
          \return (\<cr>
          \<h1>This component is for: nameofclass</h1>\<cr>
          \)\<cr>
          \}\<cr>
          \}
          \\<cr>
          \\<cr>
          \export default nameofclass;"
    norm! /nameofclass
    " norm! 8k^wviw
  elseif a:type == "req"
    exe "norm! aconst pack = require('pack');"
    norm! ^wviw
  endif


endfunction

let g:snipMate = {}
let g:snipMate.override = 1

let $FZF_DEFAULT_COMMAND = "fd --type f"

set colorcolumn=0
